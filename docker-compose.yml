version: "3.8"

services:
  nginx:
    image: jwilder/nginx-proxy
    ports:
      - 80:80
      - 443:443
    restart: always
    labels:
      - "com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy=true"
    volumes:
      - ./nginx/certs:/etc/nginx/certs:rw
      - /etc/nginx/vhost.d
      - /usr/share/nginx/html
      - ./proxy-config.conf:/etc/nginx/conf.d/proxy-config.conf:ro
      - /var/run/docker.sock:/tmp/docker.sock:ro
    privileged: true

  nginx_letsencrypt:
    image: jrcs/letsencrypt-nginx-proxy-companion
    restart: always
    volumes:
      - ./nginx/certs:/etc/nginx/certs:rw
      - /var/run/docker.sock:/var/run/docker.sock:ro
    volumes_from:
      - nginx
    privileged: true

  postgres-container:
    container_name: postgres-container
    image: postgres:13
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: hd-01
      PGDATA: /data/postgres
    volumes:
      - ./db/1_setup.sql:/docker-entrypoint-initdb.d/1_setup.sql # init database in docker db
      - ./db/2_db_backup.sql:/docker-entrypoint-initdb.d/2_db_backup.sql
      - postgres:/data/postgres
    ports:
      # - 5432
      - 5432:5432
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - db-network
    restart: unless-stopped

  # pgadmin-compose:
  #   image: dpage/pgadmin4
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: "test@gmail.com"
  #     PGADMIN_DEFAULT_PASSWORD: "test123!"
  #   ports:
  #     - "16543:80"
  #   depends_on:
  #     - postgres-container

  server-api:
    container_name: server-api
    environment:
      VIRTUAL_HOST: api.cheapssd.vitinhhungdung.com
      LETSENCRYPT_HOST: api.cheapssd.vitinhhungdung.com
      NODE_ENV: production
      DB_URL_DEV: postgresql://postgres:postgres@postgres-container:5432/hd-01
    volumes:
      - ./server/public:/app/public
    env_file:
      - ./server/.env
    ports:
      - "8084:8084"
    build:
      context: ./server
      dockerfile: Dockerfile
    depends_on:
      postgres-container:
        condition: service_healthy
    networks:
      - db-network
    restart: always

  web-nextjs:
    container_name: web-nextjs
    # image: hd-web:v1
    environment:
      NODE_ENV: production
      VIRTUAL_HOST: cheapssd.vitinhhungdung.com
      LETSENCRYPT_HOST: cheapssd.vitinhhungdung.com
    # env_file:
    #   - ./web/.env
    ports:
      - "3000:3000"
    build:
      context: ./web
      dockerfile: Dockerfile
    depends_on:
      - server-api
    networks:
      - db-network
    restart: always

  web-admin:
    container_name: web-admin
    image: nginx
    environment:
      VIRTUAL_HOST: admin.cheapssd.vitinhhungdung.com
      LETSENCRYPT_HOST: admin.cheapssd.vitinhhungdung.com
    volumes:
      - ./admin/build:/usr/share/nginx/html
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
    networks:
      - db-network
    restart: always

networks:
  db-network:
    driver: bridge

volumes:
  postgres:
  server-api:
  # pgadmin:
